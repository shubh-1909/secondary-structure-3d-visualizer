# -*- coding: utf-8 -*-
"""Secondary_Structure_3D_Viewer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16aLvtjGUH9LEpmGtUBxGpu1pJwhoeSY3

# üß¨ Secondary Structure Prediction & 3D Structure Visualization

This project reads a **protein PDB file**, predicts **basic secondary structures**, and visualizes / edits the **3D structure**.

It covers:
- üß† Secondary structure prediction (Helix, Sheet, Coil)
- üñºÔ∏è Visualization of 3D structure (cartoon, surface, sticks)
- ‚úèÔ∏è Editing 3D style and colors

---

‚úÖ Tools: BioPython, Py3Dmol, Google Colab
"""

!pip install biopython py3Dmol

from Bio import PDB
import py3Dmol
from collections import Counter
import pandas as pd
from google.colab import files

"""## üìÇ Upload a .pdb file

"""

uploaded = files.upload()
pdb_file = list(uploaded.keys())[0]

parser = PDB.PDBParser()
structure = parser.get_structure("protein", pdb_file)

print("‚úÖ Structure loaded:")
for model in structure:
    for chain in model:
        print(f"‚õìÔ∏è Chain {chain.id}, residues: {len(list(chain))}")

"""## üß† Secondary Structure Estimation
We'll approximate:
- Helix: residues named 'H', 'G', 'I' (typical DSSP helix codes)
- Sheet: residues named 'E', 'B'
- Coil: all others

"""

# Approx fake DSSP since DSSP itself needs mkdssp (Linux binary)
# We'll simulate with residue type count for illustration
helix_like = ['ALA', 'GLU', 'LEU']  # example favoring helices
sheet_like = ['VAL', 'ILE', 'TYR']  # example favoring sheets

residues = [residue.get_resname() for model in structure for chain in model for residue in chain if PDB.is_aa(residue)]
counts = Counter(residues)

helix_count = sum(counts[r] for r in helix_like if r in counts)
sheet_count = sum(counts[r] for r in sheet_like if r in counts)
coil_count = len(residues) - helix_count - sheet_count

summary_df = pd.DataFrame({
    "Type": ["Helix (approx)", "Sheet (approx)", "Coil (approx)"],
    "Count": [helix_count, sheet_count, coil_count]
})
summary_df

"""## üñºÔ∏è Interactive 3D Structure Viewer
Default style: cartoon colored by spectrum.

"""

with open(pdb_file, 'r') as f:
    pdb_data = f.read()

view = py3Dmol.view(width=600, height=400)
view.addModel(pdb_data, 'pdb')
view.setStyle({'cartoon': {'color': 'spectrum'}})
view.zoomTo()
view.show()

"""## ‚úèÔ∏è Editing the 3D Structure
Switch to surface or stick style to explore interactions.

"""

# Surface style
view = py3Dmol.view(width=600, height=400)
view.addModel(pdb_data, 'pdb')
view.setStyle({'surface': {'opacity':0.9}})
view.zoomTo()
view.show()

# Stick style, colored by element
view = py3Dmol.view(width=600, height=400)
view.addModel(pdb_data, 'pdb')
view.setStyle({'stick': {'colorscheme':'element'}})
view.zoomTo()
view.show()

"""## üî¨ Count residue types

"""

from collections import Counter

residue_list = [residue.get_resname() for model in structure for chain in model for residue in chain if PDB.is_aa(residue)]
counts = Counter(residue_list)

import pandas as pd
df_counts = pd.DataFrame(counts.items(), columns=["Residue", "Count"]).sort_values("Count", ascending=False)
df_counts.reset_index(drop=True, inplace=True)
df_counts

"""## ‚úÖ Conclusion

This project:
- Approximated **secondary structure prediction** by residue classes (Helix, Sheet, Coil)
- Visualized and explored the **3D structure** using multiple styles
- Allowed **editing views** (cartoon, surface, stick) to examine interactions

Ready for bioinformatics portfolio and interviews!
"""